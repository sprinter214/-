void radixSort(vector<int>& vec)                      核心思路：按照最低位大小排序，逐步又低到高再排，直到最高位，最终得到一个排好序的数组，这就是基数排序
{
    int max = 0;
    for (int i = 0; i < vec.size(); ++i)               mod：取模：用于确定取模的数值，mod为10时取到个位，100时同时取出十位和个位
    {                                                  dev：除法：用于缩小取模结果，确保取出的是某一位的具体数字，除以1取个位，除以十取十位。
        if (max < vec[i])
        {
            max = vec[i];
        }
    }
    int len = to_string(max).length();                 bucket：一个二维数组，用于存放根据当前位数进行分类的数字，vec，答案数组，可以不断地覆盖

    vector<vector<int>> bucket;        
    int mod = 10, dev = 1;
    for (int i = 0; i < len; ++i, mod *= 10, dev *= 10)
    {
        bucket.resize(10);  // 有10个桶: 0~9
        for (int j = 0; j < vec.size(); ++j)
        {
            int num = vec[j] % mod / dev;
            bucket[num].push_back(vec[j]);
        }
        int index = 0;
        for (const auto& item : bucket)
        {
            for (const auto& it : item)
            {
                vec[index++] = it;
            }
        }
        bucket.clear();
    }
}

int main()
{
    srand(time(NULL));
    vector<int> data;
    cout << "排序前的原始数据: ";
    for (int i = 0; i < 10; ++i)
    {
        data.push_back(rand() % 100);
        cout << data.back() << " ";
    }
    cout << endl;
    radixSort(data);
    cout << "排序之后的数据: ";
    for (const auto& item : data)
    {
        cout << item << " ";
    }
    cout << endl;
    return 0;
}
