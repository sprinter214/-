bool isIsomorphic(string s, string t) {
        if(s.size()!=t.size())
        return false;
        unordered_map<char,char> s2t; //创建不可重复一一对应的map容器
        unordered_map<char,char> t2s;
        int len=s.size();
        for(int i=0;i<len;i++)////遍历数组的每一个字符，x是s的当前字符，y是t的当前字符
        {
            int x=s[i],y=t[i];    
            if((s2t.count(x)&&s2t[x]!=y)||(t2s.count(y)&&t2s[y]!=x)) ////s2t.count(x)用于检测某个键是否存在  
                        //若键存在，且映射关系不等于y，则返回false；
            return false;
        else
        {
            s2t[x]=y;      ////s2t[x] 表示在 unordered_map s2t中，键x对应的值。
            t2s[y]=x;
        }
        }
        return true;
    }
unordered_set 用于存储唯一的元素，元素本身就是键，没有对应的值。
unordered_map 用于存储键值对（key-value pairs），即每个元素都有一个键和一个与之对应的值。
count 返回容器中等于指定值的元素个数，count 函数的使用非常简单，可以快速判断一个元素是否存在于容器中，而不需要使用 find 方法并检查返回的迭代器。
由于map和set中的元素都是唯一的，所以只能返回1或0

思路总结：
长度检查：首先检查两个字符串的长度是否相同。如果长度不同，直接返回 false。
建立映射关系：
使用 s2t 哈希表记录字符串 s 中字符到字符串 t 中字符的映射关系。
使用 t2s 哈希表记录字符串 t 中字符到字符串 s 中字符的映射关系。
遍历字符串：逐字符遍历两个字符串。
对于每个字符对 s[i] 和 t[i]，检查：
s2t 中是否存在 s[i] 并且其映射值不等于 t[i]，或者
t2s 中是否存在 t[i] 并且其映射值不等于 s[i]。
如果上述任一条件成立，则返回 false，表示这两个字符串不是同构的。
否则，更新 s2t 和 t2s 的映射关系。
返回结果：如果遍历完所有字符对没有发现冲突，则返回 true，表示这两个字符串是同构的。
通过这种方式，可以确保每个字符在两个字符串中都唯一对应，从而判断字符串是否同构。
