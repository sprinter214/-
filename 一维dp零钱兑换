class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        int n=coins.size();         //面值数量
        int Max=amount+1;           //达不到的Max
        vector<int> dp(amount+1,Max);//达到该面值的最小次数，初始值均设置为最大面额加1
        dp[0]=0;
        for(int i=1;i<=amount;i++)
        {
            for(int j=0;j<n;j++)
            {
                  if(coins[j]<=i)  //对组成的面值进行筛选，若数组元素大于当前构建的面值，则跳过               
                {                    
                dp[i]=min(dp[i],dp[i-coins[j]]+1);//当前面值的最小值等于 该次循环中使用其他面值得到的最小值 对比 使用该面值的最小值 他们之间的最小值，均无法匹配说明该面值无法由数组中的面值得到
                }
            }
        }
        return dp[amount]<Max? dp[amount]:-1;  //直接返回查找所需面值的最小次数
    }
};
内嵌for循环的意义：min(dp[i], dp[i-coins[j]] + 1) 的目的是选择当前已知的凑成 i 的最小硬币数（dp[i]）和使用 coins[j] 后的
硬币数（dp[i-coins[j]] + 1）中的较小者，更新 dp[i] 为最优解。
这段代码的核心是更新 dp[i]（/达到该面值的最小次数），即计算如何用最少的硬币凑成金额 i。通过遍历所有可能的硬币面值，并结合已知的凑成小于 i 的金额的最优解，逐步构建出凑成 i 的最优解。
口头表达
计算出从1到目标面值之间所有面值的最小累加次数，计算方法：当前最小值等于使用不同coins提供的硬币后新比较出的最小值。
