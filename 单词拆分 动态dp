给你一个字符串 s 和一个字符串列表 wordDict 作为字典。如果可以利用字典中出现的一个或多个单词拼接出 s 则返回 true。
bool wordBreak(string s, vector<string>& wordDict) {
        int n=s.size();
        unordered_set<string> hash;    dp[i]代表从0到i的字符串能由字典里的词组成  返回true
        for(auto &str:wordDict)             也代表前i个字符能由字典里的词组成
        {
            hash.emplace(str);    创建哈希表，使用emplace往里塞元素
        }
        vector<bool>dp(n+1);
        dp[0]=true;
        for(int i=1;i<=s.size();i++)      遍历dp[i]  外层循环 i 从 1 到 s.size()，表示我们在检查从字符串开始到位置 i 的子串。
        {
            for(int j=0;j<i;j++)           内层循环 j 从 0 到 i，用于划分子串。检查从位置 j 到 i 的子串 s.substr(j, i - j) 是否存在于 wordDictSet 中。
            {
                if(dp[j]&&hash.find(s.substr(j,i-j))!=hash.end())
                {
                    dp[i]=true;                如果 dp[j] 为 true，并且子串 s.substr(j, i - j) 在字典中存在，那么 dp[i] = true，表示前 i 个字符可以被成功拆分。
                                                  一旦找到符合条件的子串，立即退出内层循环（break），因为我们已经确定 dp[i] = true。
                    break;                       dp[j] 不包含 字符索引 j，它表示的是 字符串 s 的前 j 个字符 是否可以被成功拆分。
                }
            }
        }
        return dp[n];
    }
};、
 假设字符串 s = "leetcode"：
dp[4] = true 表示 s[0:4]（即 "leet"）可以被成功拆分。
s.substr(4, 4) 是 "code"，如果 "code" 在字典中，且 dp[4] = true，则可以更新 dp[8] = true，表示整个字符串 "leetcode" 可以被成功拆分。
