class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        vector<int> dp(n,1);    ///////////////每一个元素的子序列都至少为1
        for(int i=0;i<n;i++)     //从第一个元素开始，寻找每个元素的最长递增子序列
        { 
            for(int j=0;j<i;j++)   ////当前元素的最长子序列等于该子序列的上一个元素的最长子序列
            {
                if(nums[j]<nums[i])
                dp[i]=max(dp[i],dp[j]+1);   //因为答案最后存储在dp[i]中，所以形式上是dp[i]与各个dp[j]+1对比找最大值，但实际上是求解各dp[j]里的最大值
            }
        }
         return *max_element(dp.begin(),dp.end());//返回指向范围中最大元素的迭代器，解引用这个迭代器就得到该最大元素的值。
    }
};
内层循环变量 j 从 0 到 i-1。即对于当前的 i，内层循环检查所有在 nums[i] 之前的元素 nums[j]。
(if (nums[j] < nums[i]))：
这个条件用来检查 nums[j] 是否小于 nums[i]。如果是，那么 nums[i] 可以接在 nums[j] 后面，形成一个递增的子序列。这里的“递增”是指后面的元素比前面的元素大
总结：
内层循环的整个过程就是为了找出以 nums[i] 结尾的所有可能的递增子序列的最大长度，并将其记录在 dp[i] 中。
这一步骤对所有 i 都执行一遍之后，dp 数组就包含了所有以各个元素为结尾的最长递增子序列的长度。最终结果是 dp 数组中的最大值。
