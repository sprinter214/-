vector<int> nums;
nums.begin()返回的是一个迭代器，而不是一个整数。
class Solution {
public:
void reverse(int a,int b,vector<int>& nums)//说明可以写函数
        {
            while(a<b)
            {
                int temp=nums[a];
                nums[a]=nums[b];
                nums[b]=temp;
                a++;
                b--;
            }
        }
    void rotate(vector<int>& nums, int k) {
        int n=nums.size();
         if (k == 0) return;
         k = k % n;//////// /////如果k大于数组大小，取余数，此处为对形参的处理，无论形参是多大都可以轮转
        reverse(0,n-1,nums);
        reverse(0,k-1,nums);
        reverse(k,n-1,nums);
    }
};////////////////////////////////////////原地旋转数组，即反转两次，无额外创建空间；
这段代码的核心思路是通过三次反转来实现数组的旋转操作。具体步骤如下：

处理边界情况：如果k为0，则无需旋转数组。计算k模数组长度n，以防止k大于数组长度。

定义反转函数reverse：该函数接收三个参数a、b和nums，通过交换nums[a]和nums[b]的位置，实现从索引a到b之间元素的反转。

三次反转实现旋转：

第一次反转：将整个数组反转，这样后面的元素就移动到了前面。
第二次反转：将数组的前k个元素再反转，使得这部分元素恢复到原始顺序。
第三次反转：将剩下的元素（从k到末尾）再反转，同样恢复它们的顺序。
通过以上步骤，原数组被旋转k步，所有元素顺序得到了调整。该方法的时间复杂度为O(n)，空间复杂度为O(1)，因为只进行了元素的就地交换。
