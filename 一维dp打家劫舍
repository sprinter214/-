class Solution {                ////////////////////////////////下标错误的经典例子
public:
    int rob(vector<int>& nums) {
        int n=nums.size();
        if(n==0)
          return 0;
        if(n==1)
          return nums[0];
        vector<int> cursums(n,0);
        cursums[0]=nums[0];   
        cursums[1]=max(nums[0],nums[1]);                  //若n=1，nums数组存在访问内存之外的数据问题       heap-buffer-overflow ，所以该往前添加if条件判断
        for(int i=2;i<=n;i++)                             //在循环中，索引范围应为 i < n，而不是 i <= n
        {
            cursums[i]=max(cursums[i-1],cursums[i-2]+nums[i]);
        }
        return cursums[n];                                     //产生下标引索越界问题，因为cursum数组大小为n;

    }
};


class Solution {                      ///////////////////////////////////////////////////自己版本的修正   
public:
    int rob(vector<int>& nums) {
        int n=nums.size();
        if(n==0)
          return 0;
        if(n==1)
          return nums[0];
        vector<int> cursums(n,0);
        cursums[0]=nums[0];
        cursums[1]=max(nums[0],nums[1]);
        for(int i=2;i<n;i++)
        {
            cursums[i]=max(cursums[i-1],cursums[i-2]+nums[i]); //核心迭代式，每个数组存储的是遍历至当前位置可偷到的最大金额
        }                                                      //自然当该房屋不偷时，当前金额会跟上一间屋子相同，所以下一间屋子必定会偷
        return cursums[n-1];//产生下标引索越界问题，因为cursum数组大小为n;

    }
};、                              

  class Solution {                                    /////////////////////考虑到每间房屋的最高总金额只和该房屋的前两间房屋的最高总金额相关，因此可以使用滚动数组
public:
    int rob(vector<int>& nums) {                    //nums代表每一家房间的现金数
        int n=nums.size();                    变量 first 初始化为第一个房子的现金数，即 nums[0]。
        if(n==0)                              变量 second 初始化为前两个房子中现金数的最大值，即 max(nums[0], nums[1])。
          return 0;
        if(n==1)
          return nums[0];
       int first=nums[0],second=max(nums[0],nums[1]);
        for(int i=2;i<n;i++)                            ||
        {
            int temp=second;
            second=max(second,first+nums[i]);            ||核心迭代式       sec是上一间屋子，first是上两间屋子。
            first=temp;
        }
        return second; 
    }
};
  从第三个房子开始遍历数组（索引从 2 开始），对于每个房子，我们有两个选择：
不偷这个房子，那么最大金额是 second。
偷这个房子，那么前一个房子不能偷，最大金额是 first + nums[i]。
我们取这两种选择的最大值作为 second 的新值，并将之前的 second 保存到 first 中。
遍历结束后，second 保存了在不触发警报的情况下可以偷到的最大现金数。
