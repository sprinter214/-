class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        if(root==nullptr)
        return 0;
        TreeNode *temp;
        temp=root->left;
        root->left=root->right;
        root->right=temp;
        invertTree(root->left);
        invertTree(root->right);
        return root;
    }
};
核心思路：：
递归终止条件：如果当前节点 root 为 nullptr，则返回 nullptr，表示当前节点为空树，不进行翻转。
交换子节点：临时保存当前节点 root 的左子树，将 root 的左子树设为右子树，将右子树设为临时保存的左子树。
递归翻转子树：
递归调用 invertTree 翻转新的左子树。
递归调用 invertTree 翻转新的右子树。
返回根节点：在完成翻转后，返回当前根节点 root。
通过递归方法，交换每个节点的左子树和右子树，然后递归地翻转子树，最终实现整个二叉树的翻转。递归终止条件是遇到空节点。
类似于交换a和b这两个数
