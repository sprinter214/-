class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if(p==nullptr&&q==nullptr)
        return true;
        else if(p==nullptr||q==nullptr)
        return false;
        else if(p->val!=q->val)
        return false;
        else          //左右都有值且相等的情况
        {
            return isSameTree(p->left,q->left)&&isSameTree(p->right,q->right);
        }
    }
};
核心思路：：：
初始检查：
如果 p 和 q 均为 nullptr，返回 true，表示两棵空树是相同的。
如果 p 或 q 其中一个为 nullptr 而另一个不是，返回 false，表示结构不同。
如果 p 和 q 的节点值不相同，返回 false，表示节点值不同。
递归比较：

如果上述检查都通过，则递归比较 p 和 q 的左子树及右子树。
只有在 p 的左子树与 q 的左子树相同且 p 的右子树与 q 的右子树相同时，才返回 true，否则返回 false。
