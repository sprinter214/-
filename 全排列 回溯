vector<vector<int>> ans;
vector<int> path, on_path;

void dfs(vector<int>nums, int i)
{
	int n = nums.size();
	if (path.size()==n)//dfs终止条件
	{
		ans.push_back(path);
		return;
	}
	for (int j=0;j<n;j++)
	{
		if (!on_path[j])  //对当前位置判断哪些nums没使用过，使用过的pass
		{
			on_path[j] = true;
			path.push_back(nums[j]);  ///塞入当前位置后，可以做更深的递归
			dfs(nums,i+1);         
			path.pop_back();
			on_path[j] = false;
		}
		return;
	}
}
int main()
{
	int n, m;
	vector<int>num;
	while (cin>>n)
	{
		num.clear();
		on_path.assign(n, 0);
		for (int i=0;i<n;i++)
		{
			cin >> m;
			num.push_back(m);
		}
		dfs(num,0);
		path.clear();
		
	}
}
核心思路：
初始化：定义一个二维向量 ans 存储最终的排列结果，定义一个向量 path 存储当前的排列路径，定义一个布尔向量 on_path 记录当前路径中哪些元素已经被使用。
DFS函数：
递归函数 dfs 用于生成排列。
当 path 的长度等于数组的长度 n 时，表示已经形成了一个完整的排列，将其存储在 ans 中。
遍历数组 nums 中的每个元素。对于每个未在 path 中出现的元素，将其添加到 path 中，并标记为已使用。
递归调用 dfs 以继续构造下一个位置的元素。
在递归返回时，恢复现场，将元素从 path 中移除，并将其标记为未使用。
递归调用：通过递归调用 dfs 函数，逐步构造出所有可能的排列，最终返回 ans。
