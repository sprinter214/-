class Solution {       /////////中序遍历:1.中序遍历左子树，访问根节点，中序遍历右子树
public:                //root: 当前节点。///pre: 上一个访问的节点值//ans: 当前计算出的最小差值，用引用传递
    void dfs(TreeNode*root,int& pre,int& ans)
    {
        if(root==nullptr)
        return ;
        dfs(root->left,pre,ans);
        if(pre==-1)    如果 pre 仍然是 -1，说明当前节点是中序遍历中的第一个节点。
                        ，就直接将 pre 更新为当前节点的值（pre = root->val），但不进行差值计算，因为没有前一个节点来与其比较。
        {
            pre=root->val;
        }
        else
        {
            ans=min(ans,root->val-pre);
            pre=root->val;
        }
        dfs(root->right, pre, ans);
    }
    int getMinimumDifference(TreeNode* root) {
        int pre=-1;
        int ans=INT_MAX;
        dfs(root,pre,ans);
        return ans;
    }
};
这个代码的核心思路是通过中序遍历二叉搜索树（BST）来找到任意两个相邻节点值之间的最小差值。
由于中序遍历的结果是节点值的递增序列，所以相邻节点之间的差值即为最小差值候选。
核心步骤：
中序遍历：

通过递归执行中序遍历（先左子树，再根节点，最后右子树），以保证遍历节点的顺序是递增的。
比较相邻节点：

使用 pre 变量保存上一个访问的节点值（初始为 -1，表示尚未有上一个节点）。
当访问到一个新的节点时，如果 pre 已被设置，计算当前节点值与 pre 的差值，并更新 ans（最小差值）。
更新最小差值：

在每次计算出相邻节点的差值后，使用 min(ans, root->val - pre) 更新当前最小差值 ans。
更新 pre 为当前节点值，继续递归遍历。
返回结果：

中序遍历完成后，ans 中存储的就是任意两个相邻节点值之间的最小差值。
代码核心思想总结：
利用中序遍历二叉搜索树的特性，遍历过程中比较相邻节点值，逐步更新并找出最小的差值。由于中序遍历产生的序列是有序的，因此相邻节点差值的最小值就是树中任意两个节点差值的最小值。






