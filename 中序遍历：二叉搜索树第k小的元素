class Solution {
public:
 vector<int> tree;
    void midselect(TreeNode* root)
    {
        if(root==nullptr)             |||
        return;                                 不断地递归开拓新的左子树
        midselect(root->left);        |||
        tree.push_back(root->val);                到这可看作是最左端的节点，存入该节点到数组，于是检查他的右子树
        midselect(root->right);
    }
    int kthSmallest(TreeNode* root, int k) {
        midselect(root);
        return tree[k-1];
    }
};
核心步骤：
中序遍历：

使用递归的方式对二叉搜索树进行中序遍历。中序遍历的顺序是：先访问左子树，再访问根节点，最后访问右子树。
在中序遍历过程中，将每个节点的值按顺序添加到数组 tree 中。
存储节点值：

中序遍历会按照节点值的升序顺序遍历二叉搜索树，因此 tree 数组中的元素也是按升序排列的。
获取第 k 小的元素：

在中序遍历完成后，数组 tree 已经按升序排列。直接访问数组中的第 k-1 个元素，即可得到二叉搜索树中第 k 小的节点值。
代码核心思想总结：
通过中序遍历将二叉搜索树的所有节点值按升序存储在数组中，然后访问数组中第 k-1 个元素，直接返回第 k 小的节点值。
中序遍历保证了数组中的元素是有序的，因此可以简单地通过索引访问得到所需结果。
