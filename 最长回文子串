 string longestPalindrome(string s) {    //输入输出类型，输入字符串返回字符串  
        int n = s.size();
        if (n < 2) {
            return s;
        }

        int maxLen = 1;
        int begin = 0;       //记录最长回文的起始下标                                  // dp[i][j] 表示 s[i..j] 是否是回文串
        vector<vector<int>> dp(n, vector<int>(n));
        // 初始化：所有长度为 1 的子串都是回文串
        for (int i = 0; i < n; i++) {
            dp[i][i] = true;
        }
        // 递推开始
        // 先枚举子串长度
        for (int L = 2; L <= n; L++) {
            // 枚举左边界，左边界的上限设置可以宽松一些
            for (int i = 0; i < n; i++) {
                // 由 L 和 i 可以确定右边界，即 j - i + 1 = L 得
                int j = L + i - 1;
                // 如果右边界越界，就可以退出当前循环
                if (j >= n) {
                    break;
                }

                if (s[i] != s[j]) {
                    dp[i][j] = false;
                } else {
                    if (j - i+1 <= 3) {
                        dp[i][j] = true;     表示子串长度小于等于3，即2或3，那么只要头和尾相等，必定是回文串。
                    } else {
                        dp[i][j] = dp[i + 1][j - 1];   若长度大于三，头尾相等还需判断去头去尾后的字符串是否为回文串
                    }
                }

                // 只要 dp[i][L] == true 成立，就表示子串 s[i..L] 是回文，此时记录回文长度和起始位置
                if (dp[i][j] && j - i + 1 > maxLen) {
                    maxLen = j - i + 1;
                    begin = i;       //该内容属于内层循环
                }
            }
        }
        return s.substr(begin, maxLen);    //返回子字符串的可以通过记录下标和长度，使用substr();返回
核心思路：利用 DP 表格记录每个子串是否为回文，通过更新表格内容来找到最长的回文子串。
从短子串到长子串，逐步构建回文信息，以此来处理所有可能的回文子串。
///////////////////////////////////////////////////////////////////////////第二种思路，中心扩展算法
pair<int, int> expandAroundCenter(const string& s, int left, int right) {      //这个函数用于从中心向两边扩展，找到以当前中心点为基准的最大回文串的左右边界
        while (left >= 0 && right < s.size() && s[left] == s[right]) {       //当 s[left] == s[right] 时，表示左右对称，可以继续向两边扩展，检查更大的回文串。
            --left;                                                //分别向左向右扩展
            ++right;
        }
        return {left + 1, right - 1};
    }

    string longestPalindrome(string s) {
        int start = 0, end = 0;
        for (int i = 0; i < s.size(); ++i) {                       //函数遍历字符串的每个字符，以每个字符为中心，寻找最长的回文子串
            auto [left1, right1] = expandAroundCenter(s, i, i);               //分别比较以基数为扩展和以偶数为扩展的最长字串，令最长的下标left=begin，right=end；
            auto [left2, right2] = expandAroundCenter(s, i, i + 1);
            if (right1 - left1 > end - start) {
                start = left1;
                end = right1;
            }
            if (right2 - left2 > end - start) {
                start = left2;
                end = right2;
            }
        }
        return s.substr(start, end - start + 1);
    }
