class Solution {
public:
    bool isSubsequence(string s, string t) {
        int n1=t.size();
        int n2=s.size();
        int i=0;
        int j=0;         此处J为子串的下标
        while(j<n2&&i<n1)直到任意一个字符串遍历完。
        {
            if(s[j]==t[i])
          {
            j++;如果当前字符 s[j] 和 t[i] 相同，则将 j 指针向右移动一位，以检查 s 的下一个字符。
          }
          i++;无论字符是否匹配，都将 i 指针向右移动一位，以继续检查 t 的下一个字符。
        }
        return j==n2;
    }
};
使用一个 while 循环，遍历 t 的每一个字符（通过 i 指针）和 s 的每一个字符（通过 j 指针），直到任意一个字符串遍历完。
如果当前字符 s[j] 和 t[i] 相同，则将 j 指针向右移动一位，以检查 s 的下一个字符。
无论字符是否匹配，都将 i 指针向右移动一位，以继续检查 t 的下一个字符。
循环结束后，如果 j 指针已经到达 s 的末尾（即 j == n2），则说明 s 是 t 的子序列，返回 true；否则返回 false。
