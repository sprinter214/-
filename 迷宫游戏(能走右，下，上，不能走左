已知迷宫大小为M*N,玩家一开始在迷宫的左 上角，起点(0,0)点，要抵达迷宫的右下角，终点(M-1,N-1)。
玩家可以控制勇者向上向右向下三个方向进行移动，一-次只能移动一格，不可以向左移动，不可以走已经走过的格子。
在迷宫的每一格都有对应的分数，分数有正有负，移动到对应格上就要加上对应的分数。
当玩家移动到上边缘时，则不能再往上移动
当玩家移动到下边缘时，则不能再往下移动
现在需要找出玩家走到终点时能获得的最大分数。

I输入描述
输入第一行有两个数N M(1 <= M, N <= 100)，分别表示迷宫的宽高，
接下来M行，每行N个数，表示这一行迷宫从左到右每 格的分值L(-10000<=L <= 10000)

#include <iostream>
#include <vector>
using namespace std;
// 函数来计算到达终点 (M-1, N-1) 的最大分数
int maxScore(vector<vector<int>>& maze) {
    int M = maze.size();  //行
    int N = maze[0].size();  //列
    // dp数组，初始化为非常小的值
    vector<vector<int>> dp(M, vector<int>(N, -1e9));
    // 起点的分数初始化
    dp[0][0] = maze[0][0];

    // 填充dp数组
    for (int i = 0; i < M; ++i) {
        for (int j = 0; j < N; ++j) {
            if (i > 0) {
                // 从上面过来的情况
                dp[i][j] = max(dp[i][j], dp[i - 1][j] + maze[i][j]);
            }
            if (j > 0) {
                // 从左边过来的情况
                dp[i][j] = max(dp[i][j], dp[i][j - 1] + maze[i][j]);
            }
            if (i < M - 1) {
                // 从下面过来的情况
                dp[i][j] = max(dp[i][j], dp[i + 1][j] + maze[i][j]);
            }
        }
    }

    return dp[M - 1][N - 1];
}
int main() {
    int M, N;
    cout << "Enter the dimensions of the maze (M N): ";
    cin >> M >> N;
    vector<vector<int>> maze(M, vector<int>(N));
    cout << "Enter the maze scores:\n";
    for (int i = 0; i < M; ++i) {
        for (int j = 0; j < N; ++j) {
            cin >> maze[i][j];
        }
    }
    int result = maxScore(maze);
    cout << "Maximum score to reach the end: " << result << endl;
    return 0;
}
