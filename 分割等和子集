 bool canPartition(vector<int>& nums) {
        int n=nums.size();
        if(n<2)
        {
            return false;
        }
        int max1=0,sum=0;
        for(int num:nums)
        {
            sum+=num;
            max1=max(max1,num);
        }
        if(sum%2!=0)
        {
            return false;
        }
        int target=sum/2;
        if(max1>target)
        {
            return false;
        }
         vector<int> dp(target + 1, 0);
        dp[0]=true;
        for(int i=0;i<n;i++)
        {
            int num=nums[i];
            for(int j=target;j>=num;j--)
            {
                dp[j]=dp[j]|dp[j-num];                       
            }
        }
        return dp[target];
当 j < num 时，不可能用当前的元素 num 来组合出和 j。所以不需要处理这种情况，而倒序遍历已经确保这种情况自动跳过。
例如，当你处理 num = 5 时，如果 j = 4，意味着你不可能通过加上 num（即5）来得到和为 4 的子集，因此代码不会尝试更新 dp[4]。
核心思路：
将问题转化为：能否找到一个子集，其和等于数组元素总和的一半 target。如果总和是奇数，直接返回 false。
状态定义：
定义一个一维布尔数组 dp，其中 dp[j] 表示是否能通过选取若干个元素使得其和为 j。
初始时，dp[0] = true，表示和为 0 总是可以通过不选取任何元素得到。
状态转移：

对于每个元素 num，倒序遍历数组 dp，检查是否可以通过之前的状态得到和为 j 的子集。
使用 dp[j] |= dp[j - num] 更新状态，表示如果和为 j - num 的子集存在，那么加入当前元素后和为 j 的子集也存在。
结果判断：

最终检查 dp[target]，如果为 true，则说明可以找到一个子集使其和为 target，即数组可以被分成两个和相等的子集。
核心要点：
倒序遍历：倒序遍历是为了避免在同一轮次中重复使用当前元素。
动态规划的空间优化：只使用一维数组 dp 进行状态转移，而不需要二维数组。
