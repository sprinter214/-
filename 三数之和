class Solution {                  //某楷的错误杰作
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n=nums.size();
        if(n<=2)
        return {};
        vector<vector<int>> ans;
        sort(nums.begin(),nums.end());
        int k=n-1;                            双指针 k 的初始化和移动：变量 k 的初始化和递减位置不对，应该在每次内层循环中初始化 k，而不是在外层循环中。
        for(int i=0;i<n;i++)                   双指针法需要一个固定指针和两个移动指针，内层循环应该有两个指针而不是一个。
        {
            if(i==0||nums[i]!=nums[i-1])
            {
                for(int j=i+1;j<k;j++) 
                {
                    if(nums[i]+nums[j]+nums[k]==0)          //内循环没有跳过重复元素
                    {
                        ans.push_back({nums[i],nums[j],nums[k]});
                        k--;
                    }
                }
            }
        }
        return ans;
    }
};
///////////////////////////////////////////////////////////////////
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n=nums.size();
        if(n<=2)
        return {};
        vector<vector<int>> ans;
        sort(nums.begin(),nums.end());
        for(int i=0;i<n-2;i++)
        {
            if(i>0&&nums[i]==nums[i-1])continue;     在第一个指针中跳过相同的元素，i>0避免数据越界。
            int left=i+1;
            int right=n-1;
            while(left<right)
            {
                int sum=nums[i]+nums[left]+nums[right];
                if(sum==0)
                {
                ans.push_back({nums[i],nums[left],nums[right]});
                while(left<right&&nums[left]==nums[left+1])left++;  //因为要不断跳过重复的元素，left在跳过的过程中也要保证left<right
                while(left<right&&nums[right]==nums[right-1])right--;
                left++;
                right--;
                }
                else if(sum>0)
                right--;
                else
                left++;
            }
        }
        return ans;
    }
};
排序数组：

首先对输入数组进行排序，以便使用双指针法。
外层循环遍历：

使用一个外层循环固定一个元素（nums[i]），并确保跳过重复元素。
双指针法：

对于每个固定的元素 nums[i]，使用两个指针 left 和 right：
left 从 i + 1 开始。
right 从数组末尾开始。
计算三数之和 sum = nums[i] + nums[left] + nums[right]。
处理三数之和：

如果 sum == 0：
将三元组 {nums[i], nums[left], nums[right]} 添加到结果集。
跳过所有重复的 nums[left] 和 nums[right]，并分别移动 left 和 right。
如果 sum < 0：
说明和太小，需要增加 left 指针。
如果 sum > 0：
说明和太大，需要减少 right 指针。
返回结果：

返回所有不重复的三元组。
